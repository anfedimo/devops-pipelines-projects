parameters:
  - name: Checkout
    type: string
    default: ''
  # El agente autoalojado que usarÃ¡s se encuentra en el pool 'Default'
  - name: AgentPool
    type: string
  # Nombre de la conexiÃ³n de servicio de Docker Hub (debe estar creada en Azure DevOps)
  - name: DockerRegistryServiceConnection
    type: string
  # Nombre del repositorio en Docker Hub (anfedimo/sabana-api)
  - name: DockerImageRepository
    type: string
  - name: ImageTag
    type: string

# ==============================================================================
# ETAPA 1: BUILD Y PUSH
# ==============================================================================
stages:
  - stage: BuildPushBackend
    displayName: ðŸ“¦ Build and Push Backend Image
    jobs:
      - job: BuildAndPush
        displayName: Build and Push Docker Image
        # Usamos el pool donde estÃ¡ tu agente (MacbookM3Agent)
        pool: ${{ parameters.AgentPool }}

        steps:
          - checkout: ${{ parameters.Checkout }}

          # 1. Tarea para autenticar, construir y empujar la imagen
          - task: Docker@2
            displayName: Build and Push Image to Docker Hub
            inputs:
              containerRegistry: ${{ parameters.DockerRegistryServiceConnection }}
              repository: ${{ parameters.DockerImageRepository }}
              command: 'buildAndPush'
              # AsegÃºrate de que tu Dockerfile estÃ© en la raÃ­z del contexto
              Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              tags: |
                ${{ parameters.ImageTag }}

  # ==============================================================================
  # ETAPA 2: DESPLIEGUE LOCAL
  # ==============================================================================
  - stage: DeployBackend
    displayName: ðŸš€ Deploy Backend Locally
    # Depende de que la etapa anterior haya sido exitosa
    dependsOn: BuildPushBackend
    jobs:
      - job: DeployLocally
        displayName: Deploy Docker Container on Local Agent
        # Â¡IMPORTANTE! Debe usar el pool del agente autoalojado (MacbookM3Agent)
        pool: ${{ parameters.AgentPool }}

        steps:
          # 1. Detener y eliminar el contenedor anterior para evitar conflictos de nombres/puertos
          # '|| true' permite que el script no falle si el contenedor no existe
          - script: |
              echo "Stopping and removing old container if exists..."
              docker stop sabana-api-local || true
              docker rm sabana-api-local || true
            displayName: Cleanup Old Container
            continueOnError: true

          # 2. Pull y ejecuciÃ³n de la nueva imagen
          - script: |
              IMAGE_FULL_NAME=${{ parameters.DockerImageRepository }}:${{ parameters.ImageTag }}
              echo "Pulling image from Docker Hub: $IMAGE_FULL_NAME"
              docker pull $IMAGE_FULL_NAME
              
              echo "Running new container (Port 8080:8080)..."
              # Ejecutar el contenedor en segundo plano (-d) y mapear los puertos (-p)
              docker run -d -p 8080:8080 \
                --name sabana-api-local \
                $IMAGE_FULL_NAME
            displayName: Run Docker Container Locally