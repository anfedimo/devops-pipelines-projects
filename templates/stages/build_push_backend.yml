parameters:
  - name: Checkout
    type: string
    default: ''
  # El agente autoalojado que usar√°s se encuentra en el pool 'Default'
  - name: AgentPool
    type: string
  # Nombre de la conexi√≥n de servicio de Docker Hub (debe estar creada en Azure DevOps)
  - name: DockerRegistryServiceConnection
    type: string
  # Nombre del repositorio en Docker Hub (anfedimo/sabana-api)
  - name: DockerImageRepository
    type: string
  - name: ImageTag
    type: string

# ==============================================================================
# ETAPA 1: BUILD Y PUSH
# ==============================================================================
stages:
  - stage: BuildPushBackend
    displayName: üì¶ Build and Push Backend Image
    jobs:
      - job: BuildAndPush
        displayName: Build and Push Docker Image
        # Usamos el pool donde est√° tu agente (MacbookM3Agent)
        pool: ${{ parameters.AgentPool }}

        steps:
          - checkout: ${{ parameters.Checkout }}

          # 1. Tarea para autenticar, construir y empujar la imagen
          - task: Docker@2
            displayName: Build and Push Image to Docker Hub
            inputs:
              containerRegistry: ${{ parameters.DockerRegistryServiceConnection }}
              repository: ${{ parameters.DockerImageRepository }}
              command: 'buildAndPush'
              # Aseg√∫rate de que tu Dockerfile est√© en la ra√≠z del contexto
              Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              tags: |
                ${{ parameters.ImageTag }}

  # ==============================================================================
  # ETAPA 2: DESPLIEGUE LOCAL
  # ==============================================================================
  - stage: DeployBackend
    displayName: üöÄ Deploy Backend Locally
    # Depende de que la etapa anterior haya sido exitosa
    dependsOn: BuildPushBackend
    jobs:
      - job: DeployLocally
        displayName: Deploy Docker Container on Local Agent
        # ¬°IMPORTANTE! Debe usar el pool del agente autoalojado (MacbookM3Agent)
        pool: ${{ parameters.AgentPool }}

        steps:
          # 1. Detener y eliminar el contenedor anterior para evitar conflictos de nombres/puertos
          # '|| true' permite que el script no falle si el contenedor no existe
          - script: |
              echo "Stopping and removing old container if exists..."
              docker stop sabana-api-local || true
              docker rm sabana-api-local || true
            displayName: Cleanup Old Container
            continueOnError: true

          # 2. Pull y ejecuci√≥n de la nueva imagen
          - script: |
              IMAGE_FULL_NAME=${{ parameters.DockerImageRepository }}:${{ parameters.ImageTag }}
              echo "Pulling image from Docker Hub: $IMAGE_FULL_NAME"
              docker pull $IMAGE_FULL_NAME
              
              echo "Running new container (Port 9000:9000)..."
              # Ejecutar el contenedor en segundo plano (-d) y mapear los puertos (-p)
              docker run -d -p 9000:9000 \
                --name sabana-api-local \
                $IMAGE_FULL_NAME
            displayName: Run Docker Container Locally

          - script: |
              echo "Waiting 15 seconds for the container to fully initialize..."
              sleep 15
              
              echo "Testing access to http://localhost:9000 from the agent..."
              # curl -f: El flag -f (fail) asegura que curl devuelva un error si el servidor responde con un c√≥digo HTTP de error (4xx o 5xx),
              # o si la conexi√≥n falla. Esto forzar√° la falla del pipeline si el test no pasa.
              curl -f http://localhost:9000
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Success! Local deployment verified via HTTP."
              else
                echo "‚ùå Failure! Local deployment test failed (HTTP error or connection refusal)."
                exit 1 # Forzar la falla del Job si el test no pasa
              fi
            displayName: Verify Local Deployment